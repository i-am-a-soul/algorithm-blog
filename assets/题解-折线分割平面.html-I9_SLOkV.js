import{_ as h,r as t,o as k,c as v,a as e,b as a,d as s,w as n,e as r}from"./app-nQkb7BpC.js";const b={},y=e("h1",{id:"折线分割平面",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#折线分割平面","aria-hidden":"true"},"#"),a(" 折线分割平面")],-1),g={href:"https://vjudge.net/problem/HDU-2050",target:"_blank",rel:"noopener noreferrer"},z=e("h2",{id:"分析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),a(" 分析")],-1),x=e("p",null,[e("code",null,"n"),a("条折线分平面的最大区域数。")],-1),w=e("p",null,[a("数列："),e("code",null,"2, 7, 16, 29, ..."),a("。")],-1),N={class:"katex"},T={class:"katex-mathml"},V=r('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">4</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">3</span></span></span>',1),B={class:"katex"},E={class:"katex-mathml"},C=r('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.10764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathrm">2</span><span class="mord"><span class="mord mathit">n</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathit">n</span><span class="mbin">+</span><span class="mord mathrm">1</span></span></span>',1),D=r(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">*</span> n <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function H(I,L){const _=t("ExternalLinkIcon"),l=t("mi"),c=t("msub"),p=t("mo"),o=t("mn"),i=t("mrow"),u=t("annotation"),m=t("semantics"),d=t("math"),f=t("msup");return k(),v("div",null,[y,e("p",null,[e("a",g,[a("HDOJ-2050-折线分割平面"),s(_)])]),z,x,w,e("p",null,[a("递推公式："),e("span",N,[e("span",T,[s(d,null,{default:n(()=>[s(m,null,{default:n(()=>[s(i,null,{default:n(()=>[s(c,null,{default:n(()=>[s(l,null,{default:n(()=>[a("f")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(c,null,{default:n(()=>[s(l,null,{default:n(()=>[a("f")]),_:1}),s(i,null,{default:n(()=>[s(l,null,{default:n(()=>[a("n")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(o,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(o,null,{default:n(()=>[a("4")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(o,null,{default:n(()=>[a("3")]),_:1})]),_:1}),s(u,{encoding:"application/x-tex"},{default:n(()=>[a("f_n=f_{n-1}+4n-3")]),_:1})]),_:1})]),_:1})]),V]),a("。")]),e("p",null,[a("通项公式："),e("span",B,[e("span",E,[s(d,null,{default:n(()=>[s(m,null,{default:n(()=>[s(i,null,{default:n(()=>[s(c,null,{default:n(()=>[s(l,null,{default:n(()=>[a("f")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("=")]),_:1}),s(o,null,{default:n(()=>[a("2")]),_:1}),s(f,null,{default:n(()=>[s(l,null,{default:n(()=>[a("n")]),_:1}),s(o,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(p,null,{default:n(()=>[a("−")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1}),s(p,null,{default:n(()=>[a("+")]),_:1}),s(o,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(u,{encoding:"application/x-tex"},{default:n(()=>[a("f_n=2n^2-n+1")]),_:1})]),_:1})]),_:1})]),C]),a("。")]),D])}const J=h(b,[["render",H],["__file","题解-折线分割平面.html.vue"]]);export{J as default};
