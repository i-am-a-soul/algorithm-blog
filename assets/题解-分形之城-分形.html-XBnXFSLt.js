import{_ as p,r as t,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-nQkb7BpC.js";const i="/algorithm-blog/img/0024.png",u={},r=n("h1",{id:"分形之城",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分形之城","aria-hidden":"true"},"#"),s(" 分形之城")],-1),k={href:"https://www.acwing.com/problem/content/100/",target:"_blank",rel:"noopener noreferrer"},d=l('<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>见《进阶指南》第<code>18</code>页。</p><p><img src="'+i+`" alt=""></p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span> LL<span class="token operator">&gt;</span> PLL<span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">dis</span> <span class="token punctuation">(</span><span class="token keyword">const</span> PLL<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> PLL<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>first <span class="token operator">-</span> b<span class="token punctuation">.</span>first<span class="token punctuation">,</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>second <span class="token operator">-</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
PLL <span class="token function">solve</span> <span class="token punctuation">(</span>LL n<span class="token punctuation">,</span> LL m<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 由编号求坐标</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 问题边界，等级为 0 的城市只有一间房屋</span>
    LL length <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子城市的边长</span>
    LL total <span class="token operator">=</span> <span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子城市的房屋数</span>
    <span class="token keyword">auto</span> pos <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">%</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LL x <span class="token operator">=</span> pos<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> pos<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
    LL z <span class="token operator">=</span> m <span class="token operator">/</span> total<span class="token punctuation">;</span> <span class="token comment">// 房屋 m 在原城市中的区域编号（0、1、2、3）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> y<span class="token punctuation">,</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> length <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> x <span class="token operator">+</span> length<span class="token punctuation">,</span> y <span class="token operator">+</span> length <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token comment">// z == 3</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">-</span>y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>x <span class="token operator">+</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> T<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LL n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.0f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function m(v,b){const a=t("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[n("a",k,[s("AcWing-98-分形之城"),c(a)])]),d])}const h=p(u,[["render",m],["__file","题解-分形之城-分形.html.vue"]]);export{h as default};
