import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-nQkb7BpC.js";const i={},u=n("h1",{id:"邻值查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#邻值查找","aria-hidden":"true"},"#"),s(" 邻值查找")],-1),r={href:"https://www.acwing.com/problem/content/138/",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),s(" 分析")],-1),d=n("p",null,[s("见《进阶指南》第"),n("code",null,"61"),s("页。")],-1),v=n("p",null,[n("code",null,"set"),s("的"),n("code",null,"insert"),s("函数的返回值：")],-1),m={href:"http://www.cplusplus.com/pair",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"pair::first",-1),h={href:"http://www.cplusplus.com/set",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"pair::second",-1),f={href:"http://www.cplusplus.com/pair",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"true",-1),y=n("code",null,"false",-1),g=l(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> o<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
set<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> s<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> cur<span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> res <span class="token operator">=</span> inf<span class="token punctuation">,</span> index<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token comment">// ---------- 后继 ----------</span>
        <span class="token operator">++</span> k<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&gt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>idx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ---------- 前驱 ----------</span>
        k <span class="token operator">=</span> j<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&gt;=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">--</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>idx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(q,N){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("AcWing-136-邻值查找"),t(a)])]),k,d,v,n("blockquote",null,[n("p",null,[s("The single element versions (1) return a "),n("a",m,[s("pair"),t(a)]),s(", with its member "),b,s(" set to an iterator pointing to either the newly inserted element or to the equivalent element already in the "),n("a",h,[s("set"),t(a)]),s(". The "),_,s(" element in the "),n("a",f,[s("pair"),t(a)]),s(" is set to "),w,s(" if a new element was inserted or "),y,s(" if an equivalent element already existed.")])]),g])}const j=p(i,[["render",x],["__file","题解-邻值查找-Set.html.vue"]]);export{j as default};
