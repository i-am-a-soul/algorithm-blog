import{_ as k,r as c,o as _,c as f,a as e,b as a,d as s,w as n,e as i}from"./app-nQkb7BpC.js";const h="/algorithm-blog/img/0047.jpg",y={},v=e("h1",{id:"斜率最大",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#斜率最大","aria-hidden":"true"},"#"),a(" 斜率最大")],-1),b={href:"https://vjudge.net/problem/51Nod-1100",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"分析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),a(" 分析")],-1),x={class:"katex"},z={class:"katex-mathml"},w=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">A</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">&lt;</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">&lt;</span><span class="mord"><span class="mord mathit">x</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),B=e("code",null,"ABC",-1),C={class:"katex"},A={class:"katex-mathml"},N=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),q=e("p",null,[e("img",{src:h,alt:""})],-1),V=e("code",null,"6",-1),E={class:"katex"},j={class:"katex-mathml"},I=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.06em;vertical-align:-0.31em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord mathrm" style="margin-right:0.02778em;">_</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mrel">=</span><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.05017em;">B</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mpunct">,</span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.03148em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),L=i(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x3f3f3f3f</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> o<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
node a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> k<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">equal</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">fabs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> max_k <span class="token operator">=</span> <span class="token operator">-</span>inf<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        max_k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>max_k<span class="token punctuation">,</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equal</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max_k<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>idx<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function S(T,D){const m=c("ExternalLinkIcon"),t=c("mi"),p=c("msub"),l=c("mo"),o=c("mrow"),u=c("annotation"),r=c("semantics"),d=c("math");return _(),f("div",null,[v,e("p",null,[e("a",b,[a("51Nod-1100-斜率最大"),s(m)])]),g,e("p",null,[a("设"),e("span",x,[e("span",z,[s(d,null,{default:n(()=>[s(r,null,{default:n(()=>[s(o,null,{default:n(()=>[s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("A")]),_:1})]),_:1}),s(l,null,{default:n(()=>[a("<")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1})]),_:1}),s(l,null,{default:n(()=>[a("<")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("x")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1})]),_:1})]),_:1}),s(u,{encoding:"application/x-tex"},{default:n(()=>[a("x_A \\lt x_B \\lt x_C")]),_:1})]),_:1})]),_:1})]),w]),a("。")]),e("p",null,[a("如果"),B,a("三点共线，那么"),e("span",C,[e("span",A,[s(d,null,{default:n(()=>[s(r,null,{default:n(()=>[s(o,null,{default:n(()=>[s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("k")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("A")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1})]),_:1})]),_:1}),s(l,null,{default:n(()=>[a("=")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("k")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("B")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1})]),_:1})]),_:1}),s(l,null,{default:n(()=>[a("=")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("k")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("A")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1})]),_:1})]),_:1})]),_:1}),s(u,{encoding:"application/x-tex"},{default:n(()=>[a("k_{AB}=k_{BC}=k_{AC}")]),_:1})]),_:1})]),_:1})]),N]),a("。")]),q,e("p",null,[a("否则任意固定两点，上下移动另一点，得到的"),V,a("种情况均满足"),e("span",E,[e("span",j,[s(d,null,{default:n(()=>[s(r,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("m")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("x")]),_:1}),s(t,{mathvariant:"normal"},{default:n(()=>[a("_")]),_:1}),s(t,null,{default:n(()=>[a("k")]),_:1}),s(l,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("m")]),_:1}),s(t,null,{default:n(()=>[a("a")]),_:1}),s(t,null,{default:n(()=>[a("x")]),_:1}),s(l,null,{default:n(()=>[a("(")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("k")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("A")]),_:1}),s(t,null,{default:n(()=>[a("B")]),_:1})]),_:1})]),_:1}),s(l,{separator:"true"},{default:n(()=>[a(",")]),_:1}),s(p,null,{default:n(()=>[s(t,null,{default:n(()=>[a("k")]),_:1}),s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("B")]),_:1}),s(t,null,{default:n(()=>[a("C")]),_:1})]),_:1})]),_:1}),s(l,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(u,{encoding:"application/x-tex"},{default:n(()=>[a("max\\_k = max(k_{AB},k_{BC})")]),_:1})]),_:1})]),_:1})]),I]),a("。")]),L])}const G=k(y,[["render",S],["__file","题解-斜率最大-计算几何.html.vue"]]);export{G as default};
