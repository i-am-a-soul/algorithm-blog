import{_ as y,r as c,o as h,c as z,a as p,b as n,d as s,w as a,e as u}from"./app-nQkb7BpC.js";const v={},b=p("h1",{id:"一个简单的问题-2",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#一个简单的问题-2","aria-hidden":"true"},"#"),n(" 一个简单的问题 "),p("code",null,"2")],-1),x={href:"https://www.acwing.com/problem/content/description/244/",target:"_blank",rel:"noopener noreferrer"},g=p("h2",{id:"分析",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),n(" 分析")],-1),w=p("p",null,[n("见《进阶指南》第"),p("code",null,"207"),n("页。")],-1),q={class:"katex"},L={class:"katex-mathml"},N=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base textstyle uncramped"><span class="reset-textstyle displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>',1),V={class:"katex"},B={class:"katex-mathml"},C=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.58333em;"></span><span class="strut bottom" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">a</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),E={class:"katex"},I={class:"katex-mathml"},A=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),S={class:"katex"},T={class:"katex-mathml"},W=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mord mathit">x</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),j={class:"katex"},D={class:"katex-mathml"},F=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">×</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mbin">−</span><span class="mopen">(</span><span class="mord mathrm">1</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">2</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mord mathrm">.</span><span class="mbin">+</span><span class="mord mathit">x</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span>',1),G={class:"katex"},H={class:"katex-mathml"},J=u('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mbin">×</span><span class="reset-textstyle displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="reset-textstyle displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">x</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">i</span><span class="mbin">×</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span>',1),K=u(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">;</span>
LL c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> sum_a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">lowbit</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>
        idx <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
LL <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LL res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">+=</span> c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        idx <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> sum_a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum_a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> opt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> d<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> l <span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            LL res <span class="token operator">=</span> sum_a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
                <span class="token operator">-</span> <span class="token punctuation">(</span>sum_a<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> l <span class="token operator">*</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function M(O,P){const _=c("ExternalLinkIcon"),e=c("mo"),t=c("mi"),l=c("mn"),i=c("mrow"),f=c("msubsup"),o=c("msub"),k=c("mstyle"),r=c("annotation"),m=c("semantics"),d=c("math");return h(),z("div",null,[b,p("p",null,[p("a",x,[n("AcWing-243-一个简单的整数问题2"),s(_)])]),g,w,p("p",null,[p("span",q,[p("span",L,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(k,{scriptlevel:"0",displaystyle:"true"},{default:a(()=>[s(f,null,{default:a(()=>[s(e,null,{default:a(()=>[n("∑")]),_:1}),s(i,null,{default:a(()=>[s(t,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("=")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("a")]),_:1}),s(t,null,{default:a(()=>[n("i")]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("\\displaystyle\\sum_{i=1}^x a_i")]),_:1})]),_:1})]),_:1})]),N])]),p("p",null,[p("span",V,[p("span",B,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(e,null,{default:a(()=>[n("=")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("a")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("a")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("a")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("=a_1 + a_2 + ... + a_x")]),_:1})]),_:1})]),_:1})]),C])]),p("p",null,[p("span",E,[p("span",I,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(e,null,{default:a(()=>[n("=")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("=d_1 + (d_1 + d_2)+...+(d_1 + d_2 + ... + d_x)")]),_:1})]),_:1})]),_:1})]),A])]),p("p",null,[p("span",S,[p("span",T,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(e,null,{default:a(()=>[n("=")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1}),s(e,null,{default:a(()=>[n("−")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("=x \\times d_1 + (x - 1) \\times d_2 + ... + 1\\times d_x")]),_:1})]),_:1})]),_:1})]),W])]),p("p",null,[p("span",j,[p("span",D,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(e,null,{default:a(()=>[n("=")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n("−")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(l,null,{default:a(()=>[n("2")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(t,{mathvariant:"normal"},{default:a(()=>[n(".")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("=(x+1) \\times (d_1+d_2+...+d_x)-(1\\times d_1+2\\times d_2+...+x\\times d_x)")]),_:1})]),_:1})]),_:1})]),F])]),p("p",null,[p("span",G,[p("span",H,[s(d,null,{default:a(()=>[s(m,null,{default:a(()=>[s(i,null,{default:a(()=>[s(e,null,{default:a(()=>[n("=")]),_:1}),s(e,null,{default:a(()=>[n("(")]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1}),s(e,null,{default:a(()=>[n("+")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1}),s(e,null,{default:a(()=>[n(")")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(k,{scriptlevel:"0",displaystyle:"true"},{default:a(()=>[s(f,null,{default:a(()=>[s(e,null,{default:a(()=>[n("∑")]),_:1}),s(i,null,{default:a(()=>[s(t,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("=")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("i")]),_:1})]),_:1}),s(e,null,{default:a(()=>[n("−")]),_:1}),s(k,{scriptlevel:"0",displaystyle:"true"},{default:a(()=>[s(f,null,{default:a(()=>[s(e,null,{default:a(()=>[n("∑")]),_:1}),s(i,null,{default:a(()=>[s(t,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("=")]),_:1}),s(l,null,{default:a(()=>[n("1")]),_:1})]),_:1}),s(t,null,{default:a(()=>[n("x")]),_:1})]),_:1}),s(t,null,{default:a(()=>[n("i")]),_:1}),s(e,null,{default:a(()=>[n("×")]),_:1}),s(o,null,{default:a(()=>[s(t,null,{default:a(()=>[n("d")]),_:1}),s(t,null,{default:a(()=>[n("i")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(r,{encoding:"application/x-tex"},{default:a(()=>[n("=(x+1)\\times \\displaystyle\\sum_{i=1}^x d_i-\\displaystyle\\sum_{i=1}^xi\\times d_i")]),_:1})]),_:1})]),_:1})]),J])]),K])}const R=y(v,[["render",M],["__file","题解-一个简单的问题 2-树状数组.html.vue"]]);export{R as default};
