import{_ as f,r as o,o as v,c as _,a as p,b as a,d as s,w as n,e as c}from"./app-nQkb7BpC.js";const y={},h=p("h1",{id:"花神游历各国",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#花神游历各国","aria-hidden":"true"},"#"),a(" 花神游历各国")],-1),b={href:"https://www.luogu.com.cn/problem/P4145",target:"_blank",rel:"noopener noreferrer"},x=p("h2",{id:"分析",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#分析","aria-hidden":"true"},"#"),a(" 分析")],-1),z=p("p",null,"区间开平方（取下整）。",-1),g={class:"katex"},w={class:"katex-mathml"},q=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9550540000000001em;"></span><span class="strut bottom" style="height:1.205054em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.11505399999999999em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">2</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.875054em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">6</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),L={class:"katex"},N={class:"katex-mathml"},V=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9550540000000001em;"></span><span class="strut bottom" style="height:1.205054em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.11505399999999999em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">6</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.875054em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span>',1),B={class:"katex"},E={class:"katex-mathml"},C=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9550540000000001em;"></span><span class="strut bottom" style="height:1.205054em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.11505399999999999em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span><span style="top:-0.875054em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">3</span><span class="mord mathrm">1</span></span></span>',1),I={class:"katex"},P={class:"katex-mathml"},S=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9072200000000001em;"></span><span class="strut bottom" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.06722000000000006em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">3</span><span class="mord mathrm">1</span></span></span><span style="top:-0.8272200000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">5</span></span></span>',1),T={class:"katex"},j={class:"katex-mathml"},A=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9072200000000001em;"></span><span class="strut bottom" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.06722000000000006em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">5</span></span></span><span style="top:-0.8272200000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">2</span></span></span>',1),D={class:"katex"},F={class:"katex-mathml"},G=c('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9072200000000001em;"></span><span class="strut bottom" style="height:1.1572200000000001em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mopen">⌊</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.06722000000000006em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span><span style="top:-0.8272200000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="mclose">⌋</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span>',1),H=c(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ls</span> <span class="token expression">rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">rs</span> <span class="token expression">rt <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000010</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
    LL sum<span class="token punctuation">,</span> max_val<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">l</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> t<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">r</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> t<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sum</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> t<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>sum</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">max_val</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> t<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>max_val</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
LL a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
node t<span class="token punctuation">[</span>N <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">update</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">max_val</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max_val</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max_val</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">build</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">l</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> l<span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">max_val</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">update</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">modify</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">l</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">r</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">max_val</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">max_val</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">l</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">r</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> <span class="token function">max_val</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 剪枝</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">max_val</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token function">modify</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">update</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
LL <span class="token function">query</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> <span class="token function">l</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">r</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">l</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">r</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    LL res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">query</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> opt<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function J(K,M){const m=o("ExternalLinkIcon"),e=o("mo"),t=o("mn"),l=o("mrow"),d=o("msup"),u=o("msqrt"),i=o("annotation"),r=o("semantics"),k=o("math");return v(),_("div",null,[h,p("p",null,[p("a",b,[a("洛谷-P4145-花神游历各国"),s(m)])]),x,z,p("p",null,[p("span",g,[p("span",w,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("1")]),_:1}),s(d,null,{default:n(()=>[s(t,null,{default:n(()=>[a("0")]),_:1}),s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("1")]),_:1}),s(t,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("1")]),_:1}),s(d,null,{default:n(()=>[s(t,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("6")]),_:1})]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{10^{12}} \\rfloor=10^6")]),_:1})]),_:1})]),_:1})]),q]),a("。")]),p("p",null,[p("span",L,[p("span",N,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("1")]),_:1}),s(d,null,{default:n(()=>[s(t,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("6")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("1")]),_:1}),s(d,null,{default:n(()=>[s(t,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("3")]),_:1})]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{10^6} \\rfloor=10^3")]),_:1})]),_:1})]),_:1})]),V]),a("。")]),p("p",null,[p("span",B,[p("span",E,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("1")]),_:1}),s(d,null,{default:n(()=>[s(t,null,{default:n(()=>[a("0")]),_:1}),s(t,null,{default:n(()=>[a("3")]),_:1})]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("3")]),_:1}),s(t,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{10^3} \\rfloor=31")]),_:1})]),_:1})]),_:1})]),C]),a("。")]),p("p",null,[p("span",I,[p("span",P,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("3")]),_:1}),s(t,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("5")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{31} \\rfloor=5")]),_:1})]),_:1})]),_:1})]),S]),a("。")]),p("p",null,[p("span",T,[p("span",j,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("5")]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("2")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{5} \\rfloor=2")]),_:1})]),_:1})]),_:1})]),A]),a("。")]),p("p",null,[p("span",D,[p("span",F,[s(k,null,{default:n(()=>[s(r,null,{default:n(()=>[s(l,null,{default:n(()=>[s(e,null,{default:n(()=>[a("⌊")]),_:1}),s(u,null,{default:n(()=>[s(l,null,{default:n(()=>[s(t,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1}),s(e,null,{default:n(()=>[a("⌋")]),_:1}),s(e,null,{default:n(()=>[a("=")]),_:1}),s(t,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(i,{encoding:"application/x-tex"},{default:n(()=>[a("\\lfloor \\sqrt{2} \\rfloor=1")]),_:1})]),_:1})]),_:1})]),G]),a("。")]),H])}const Q=f(y,[["render",J],["__file","题解-花神游历各国-区间开平方.html.vue"]]);export{Q as default};
