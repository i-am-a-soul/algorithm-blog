import{_ as p,r as t,o,c as e,a as n,b as s,d as c,e as i}from"./app-nQkb7BpC.js";const u={},l=n("h1",{id:"邻值查找",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#邻值查找","aria-hidden":"true"},"#"),s(" 邻值查找")],-1),k={href:"https://www.acwing.com/problem/content/138/",target:"_blank",rel:"noopener noreferrer"},r=i(`<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>见《进阶指南》第<code>61</code>页。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">0x7fffffff</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">next</span> <span class="token expression">NeXt</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">element</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> element<span class="token operator">&amp;</span> o<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> val <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
element a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
stack<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> s<span class="token punctuation">;</span>

<span class="token comment">// ---------- 双向链表模板 ----------</span>
<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    element data<span class="token punctuation">;</span>
    <span class="token keyword">int</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">data</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>data</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">prev</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>prev</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NeXt</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> node<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>NeXt </span><span class="token comment">// NeXt</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Node node<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> idx<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">initialize</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> idx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    <span class="token function">prev</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">insert</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ptr<span class="token punctuation">,</span> element data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token operator">++</span> idx<span class="token punctuation">;</span>
    <span class="token function">data</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>

    <span class="token function">prev</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token function">next</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    <span class="token function">prev</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">remove</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token function">prev</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">prev</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">prev</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化链表</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> val<span class="token punctuation">,</span> i <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span>
        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">prev</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">data</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">=</span> inf<span class="token punctuation">;</span> <span class="token comment">// 边界</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">--</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ptr <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> inf<span class="token punctuation">,</span> index<span class="token punctuation">;</span>
        <span class="token comment">// ---------- 后继 ----------</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token function">data</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token function">data</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ---------- 前驱 ----------</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&gt;=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token function">prev</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token function">data</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token function">prev</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">-</span> <span class="token function">data</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token function">prev</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idx<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">remove</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> res<span class="token punctuation">,</span> index <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function d(v,b){const a=t("ExternalLinkIcon");return o(),e("div",null,[l,n("p",null,[n("a",k,[s("AcWing-136-邻值查找"),c(a)])]),r])}const f=p(u,[["render",d],["__file","题解-邻值查找-倒序处理_链表.html.vue"]]);export{f as default};
