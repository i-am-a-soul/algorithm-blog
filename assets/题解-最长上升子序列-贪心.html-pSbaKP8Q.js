import{_ as k,r as t,o as m,c as v,a as e,b as s,d as n,w as a,e as o}from"./app-nQkb7BpC.js";const _="/algorithm-blog/img/0048.gif",b={},h=e("h1",{id:"最长上升子序列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#最长上升子序列","aria-hidden":"true"},"#"),s(" 最长上升子序列")],-1),f={href:"https://vjudge.net/problem/51Nod-2080",target:"_blank",rel:"noopener noreferrer"},g=o(`<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*
样例输入:
8
5 1 6 8 2 4 5 10
样例输出:
5
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+'" alt=""></p><p><code>f[i]</code>记录长度为<code>i</code>的上升子序列的最小末尾元素值。</p>',4),y={class:"katex"},w={class:"katex-mathml"},x=o('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span>',1),N=o(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">++</span> res<span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>f <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">+</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> f<span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function V(B,E){const l=t("ExternalLinkIcon"),p=t("mi"),c=t("mo"),i=t("mrow"),u=t("annotation"),r=t("semantics"),d=t("math");return m(),v("div",null,[h,e("p",null,[e("a",f,[s("51Nod-2080-最长上升子序列"),n(l)])]),g,e("p",null,[s("时间复杂度"),e("span",y,[e("span",w,[n(d,null,{default:a(()=>[n(r,null,{default:a(()=>[n(i,null,{default:a(()=>[n(p,null,{default:a(()=>[s("O")]),_:1}),n(c,null,{default:a(()=>[s("(")]),_:1}),n(p,null,{default:a(()=>[s("n")]),_:1}),n(p,null,{default:a(()=>[s("l")]),_:1}),n(p,null,{default:a(()=>[s("o")]),_:1}),n(p,null,{default:a(()=>[s("g")]),_:1}),n(p,null,{default:a(()=>[s("n")]),_:1}),n(c,null,{default:a(()=>[s(")")]),_:1})]),_:1}),n(u,{encoding:"application/x-tex"},{default:a(()=>[s("O(nlogn)")]),_:1})]),_:1})]),_:1})]),x]),s("。")]),N])}const C=k(b,[["render",V],["__file","题解-最长上升子序列-贪心.html.vue"]]);export{C as default};
