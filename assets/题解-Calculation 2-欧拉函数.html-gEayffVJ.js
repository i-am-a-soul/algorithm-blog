import{_ as y,r as e,o as v,c as h,a as p,b as a,d as s,w as n,e as i}from"./app-nQkb7BpC.js";const b="/algorithm-blog/img/0070.png",x={},z=p("h1",{id:"calculation-2",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#calculation-2","aria-hidden":"true"},"#"),a(),p("code",null,"Calculation 2")],-1),g={href:"https://vjudge.net/problem/HDU-3501",target:"_blank",rel:"noopener noreferrer"},w=i('<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p><img src="'+b+'" alt=""></p><p>若<code>gcd(n, i) = 1</code>，则根据更相减损术有<code>gcd(n, n - i) = gcd(n, i) = 1</code>。</p><p>也就是说与<code>n</code>互质的<code>i</code>和<code>n - i</code>成对出现，且和为<code>n</code>。</p>',4),C={class:"katex"},L={class:"katex-mathml"},N=i('<span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8011130000000004em;"></span><span class="strut bottom" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="base textstyle uncramped"><span class="mrel">=</span><span class="reset-textstyle displaystyle textstyle uncramped"><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">i</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">i</span><span class="mbin">−</span><span class="mord mathit">n</span><span class="mbin">×</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">ϕ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span>',1),V=i(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">phi</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> res <span class="token operator">/</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">/=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">/</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LL n<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> n <span class="token operator">*</span> <span class="token function">phi</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> M <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function B(E,D){const r=e("ExternalLinkIcon"),t=e("mo"),l=e("mi"),c=e("mn"),o=e("mrow"),u=e("msubsup"),d=e("mfrac"),m=e("mstyle"),k=e("annotation"),_=e("semantics"),f=e("math");return v(),h("div",null,[z,p("p",null,[p("a",g,[a("HDOJ-3501-Calculation 2"),s(r)])]),w,p("p",null,[p("span",C,[p("span",L,[s(f,null,{default:n(()=>[s(_,null,{default:n(()=>[s(o,null,{default:n(()=>[s(t,null,{default:n(()=>[a("=")]),_:1}),s(m,{scriptlevel:"0",displaystyle:"true"},{default:n(()=>[s(u,null,{default:n(()=>[s(t,null,{default:n(()=>[a("∑")]),_:1}),s(o,null,{default:n(()=>[s(l,null,{default:n(()=>[a("i")]),_:1}),s(t,null,{default:n(()=>[a("=")]),_:1}),s(c,null,{default:n(()=>[a("1")]),_:1})]),_:1}),s(o,null,{default:n(()=>[s(l,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(c,null,{default:n(()=>[a("1")]),_:1})]),_:1})]),_:1}),s(l,null,{default:n(()=>[a("i")]),_:1}),s(t,null,{default:n(()=>[a("−")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a("×")]),_:1}),s(d,null,{default:n(()=>[s(o,null,{default:n(()=>[s(l,null,{default:n(()=>[a("ϕ")]),_:1}),s(t,null,{default:n(()=>[a("(")]),_:1}),s(l,null,{default:n(()=>[a("n")]),_:1}),s(t,null,{default:n(()=>[a(")")]),_:1})]),_:1}),s(o,null,{default:n(()=>[s(c,null,{default:n(()=>[a("2")]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}),s(k,{encoding:"application/x-tex"},{default:n(()=>[a("=\\displaystyle\\sum_{i=1}^{n-1}i-n\\times\\frac{\\phi(n)}{2}")]),_:1})]),_:1})]),_:1})]),N]),a("。")]),V])}const I=y(x,[["render",B],["__file","题解-Calculation 2-欧拉函数.html.vue"]]);export{I as default};
