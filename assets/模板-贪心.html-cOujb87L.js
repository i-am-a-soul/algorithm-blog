import{_ as e,o as a,c as r,e as d}from"./app-nQkb7BpC.js";const h={},t=d('<h1 id="贪心" tabindex="-1"><a class="header-anchor" href="#贪心" aria-hidden="true">#</a> 贪心</h1><h2 id="微扰-邻项交换" tabindex="-1"><a class="header-anchor" href="#微扰-邻项交换" aria-hidden="true">#</a> 微扰（邻项交换）</h2><p>证明在任意局面下，任何对局部最优策略的微小改变都会造成整体结果变差，<strong>经常用于以&quot;排序&quot;为贪心策略的证明</strong>。</p><h2 id="范围缩放" tabindex="-1"><a class="header-anchor" href="#范围缩放" aria-hidden="true">#</a> 范围缩放</h2><p>证明任何对局部最优策略作用范围的扩展都不会造成整体结果变差。</p><h2 id="决策包容性" tabindex="-1"><a class="header-anchor" href="#决策包容性" aria-hidden="true">#</a> 决策包容性</h2><p>证明在任意局面下，作出局部最优决策以后，在问题状态空间中的可达集合包含了作出其他任何决策后的可达集合。换言之，这个局部最优策略提供的可能性包含其他所有策略提供的可能性。</p><h2 id="反证法" tabindex="-1"><a class="header-anchor" href="#反证法" aria-hidden="true">#</a> 反证法</h2><h2 id="数学归纳法" tabindex="-1"><a class="header-anchor" href="#数学归纳法" aria-hidden="true">#</a> 数学归纳法</h2><h2 id="用不等式证明等式" tabindex="-1"><a class="header-anchor" href="#用不等式证明等式" aria-hidden="true">#</a> 用不等式证明等式</h2><p>若<code>贪心得到的答案 ≥ 最优解</code>且<code>贪心得到的答案 ≤ 最优解</code>，则<code>贪心得到的答案 = 最优解</code>。</p>',11),c=[t];function i(n,o){return a(),r("div",null,c)}const _=e(h,[["render",i],["__file","模板-贪心.html.vue"]]);export{_ as default};
